
import os
os.environ["PATH"] += os.pathsep + 'C:/Program Files/Graphviz 2.44.1/bin'
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.utils.np_utils import to_categorical
%matplotlib inline
os.chdir(r"C:\\Users\ssenb\Desktop\mnist")
train_dir=pd.read_csv("train.csv")
test_dir=pd.read_csv("test.csv")

#train_dir.head()

X_train=train_dir.drop(labels = ["label"],axis = 1)
#X_train.head()

y_train=train_dir['label']
#y_train.head()

sns.countplot(y_train,data=train_dir)

y_train= to_categorical(y_train, num_classes = 10)

#NORMALIZATION
X_train = X_train / 255.0
test_dir = test_dir / 255.0

#RESHAPING
X_train = X_train.values.reshape(-1, 28 , 28, 1)
test_dir = test_dir.values.reshape(-1, 28 , 28, 1)

from sklearn.model_selection import train_test_split

X, X_val, y, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=7)


from tensorflow.keras import regularizers
model=tf.keras.models.Sequential([tf.keras.layers.Conv2D(32,(5,5),activation='relu',input_shape=(28,28,1),padding='Same'),
                                           tf.keras.layers.MaxPooling2D(2,2),
                                           tf.keras.layers.Dropout(0.2),
                                           tf.keras.layers.Conv2D(32,(3,3),activation='relu',padding='Same'),
                                           tf.keras.layers.MaxPooling2D(2,2),
                                           tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='Same'),
                                           tf.keras.layers.MaxPooling2D(2,2),
                                           tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='Same'),
                                           tf.keras.layers.MaxPooling2D(2,2),
                                           tf.keras.layers.Flatten(),
                                           tf.keras.layers.Dense(512,activation='relu'),
                                           tf.keras.layers.Dropout(0.3),
                                           tf.keras.layers.Dense(10,activation='softmax')])

model.summary()

#from keras.utils import plot_model
#plot_model(model, show_shapes=True)

model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.001),
             loss='categorical_crossentropy',
             metrics=['accuracy'])

#callbacks = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=3)

class mycallbacks(tf.keras.callbacks.Callback):
    def on_epoch_end(self,epochs,logs={}):
        if(logs.get('accuracy')>0.99):
            self.model.stop_training=True
            
callbacks=mycallbacks()

history=model.fit(X,y,validation_data=(X_val,y_val),epochs=30,verbose=1,callbacks=[callbacks])


acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')

plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()


results =[]
for index in range(28000):
    img = test_dir[index].reshape(1, 28, 28, 1)
    pred = np.argmax(model.predict(img))
    results.append(pred)
    
submission = pd.DataFrame()
submission['ImageId'] = [i for i in range(1, 28001)]
submission['Label'] = results

submission.to_csv('./submission.csv', index=False)
